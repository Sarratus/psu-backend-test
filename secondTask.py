# -*- coding: cp1251 -*-

import re
# from numberGenerator import generateNumber


# Словарь всех кодов регионов с названиями
codesOfRegions = [{'code': [1], 'region': 'Республика Адыгея'}, {'code': [2, 102], 'region': 'Республика Башкортостан'}, {'code': [3], 'region': 'Республика Бурятия'}, {'code': [4], 'region': 'Республика Алтай (Горный Алтай)'}, {'code': [5], 'region': 'Республика Дагестан'}, {'code': [6], 'region': 'Республика Ингушетия'}, {'code': [7], 'region': 'Кабардино-Балкарская Республика'}, {'code': [8], 'region': 'Республика Калмыкия'}, {'code': [9], 'region': 'Республика Карачаево-Черкессия'}, {'code': [10], 'region': 'Республика Карелия'}, {'code': [11], 'region': 'Республика Коми'}, {'code': [12], 'region': 'Республика Марий Эл'}, {'code': [13, 113], 'region': 'Республика Мордовия'}, {'code': [14], 'region': 'Республика Саха (Якутия)'}, {'code': [15], 'region': 'Республика Северная Осетия-Алания'}, {'code': [16, 116], 'region': 'Республика Татарстан'}, {'code': [17], 'region': 'Республика Тыва'}, {'code': [18], 'region': 'Удмуртская Республика'}, {'code': [19], 'region': 'Республика Хакасия'}, {'code': [95], 'region': 'Чеченская республика'}, {'code': [21, 121], 'region': 'Чувашская Республика'}, {'code': [22], 'region': 'Алтайский край'}, {'code': [23, 93, 123], 'region': 'Краснодарский край'}, {'code': [24, 84, 88, 124], 'region': 'Красноярский край'}, {'code': [25, 125], 'region': 'Приморский край'}, {'code': [26], 'region': 'Ставропольский край'}, {'code': [27], 'region': 'Хабаровский край'}, {'code': [28], 'region': 'Амурская область'}, {'code': [29], 'region': 'Архангельская область'}, {'code': [30], 'region': 'Астраханская область'}, {'code': [31], 'region': 'Белгородская область'}, {'code': [32], 'region': 'Брянская область'}, {'code': [33], 'region': 'Владимирская область'}, {'code': [34], 'region': 'Волгоградская область'}, {'code': [35], 'region': 'Вологодская область'}, {'code': [36, 136], 'region': 'Воронежская область'}, {'code': [37], 'region': 'Ивановская область'}, {'code': [38, 85], 'region': 'Иркутская область'}, {'code': [39, 91], 'region': 'Калининградская область'}, {'code': [40], 'region': 'Калужская область'}, {'code': [41, 82], 'region': 'Камчатский край'}, {'code': [42, 142], 'region': 'Кемеровская область'}, {'code': [43], 'region': 'Кировская область'}, {'code': [44], 'region': 'Костромская область'}, {'code': [45], 'region': 'Курганская область'}, {'code': [46], 'region': 'Курская область'}, {'code': [47], 'region': 'Ленинградская область'}, {'code': [48], 'region': 'Липецкая область'}, {'code': [49], 'region': 'Магаданская область'}, {'code': [50, 90, 150, 190], 'region': 'Московская область'}, {'code': [51], 'region': 'Мурманская область'}, {'code': [52, 152], 'region': 'Нижегородская область'}, {'code': [53], 'region': 'Новгородская область'}, {'code': [54, 154], 'region': 'Новосибирская область'}, {'code': [55], 'region': 'Омская область'}, {'code': [56], 'region': 'Оренбургская область'}, {'code': [57], 'region': 'Орловская область'}, {'code': [58], 'region': 'Пензенская область'}, {'code': [59, 81, 159], 'region': 'Пермский край'}, {'code': [60], 'region': 'Псковская область'}, {'code': [61, 161], 'region': 'Ростовская область'}, {'code': [62], 'region': 'Рязанская область'}, {'code': [63, 163], 'region': 'Самарская область'}, {'code': [64, 164], 'region': 'Саратовская область'}, {'code': [65], 'region': 'Сахалинская область'}, {'code': [66, 96], 'region': 'Свердловская область'}, {'code': [67], 'region': 'Смоленская область'}, {'code': [68], 'region': 'Тамбовская область'}, {'code': [69], 'region': 'Тверская область'}, {'code': [70], 'region': 'Томская область'}, {'code': [71], 'region': 'Тульская область'}, {'code': [72], 'region': 'Тюменская область'}, {'code': [73, 173], 'region': 'Ульяновская область'}, {'code': [74, 174], 'region': 'Челябинская область'}, {'code': [75, 80], 'region': 'Забайкальский край'}, {'code': [76], 'region': 'Ярославская область'}, {'code': [77, 97, 99, 177, 197, 199, 777], 'region': 'г. Москва'}, {'code': [78, 98, 178], 'region': 'г. Санкт-Петербург'}, {'code': [79], 'region': 'Еврейская автономная область'}, {'code': [83], 'region': 'Ненецкий автономный округ'}, {'code': [86], 'region': 'Ханты-Мансийский автономный округ - Югра'}, {'code': [87], 'region': 'Чукотский автономный округ'}, {'code': [89], 'region': 'Ямало-Ненецкий автономный округ'}, {'code': [92], 'region': 'Резерв МВД Российской Федерации'}, {'code': [94], 'region': 'Территории, находящиеся за пределами РФ и обслуживаемые Департаментом режимных объектов МВД России (например, Байконур)'}]


# Создание списка всех возможных кодов регионов в формате Str
possibleCodesStr = []
for item in codesOfRegions:
	code = item['code']

	for i in code:
		if i < 10:
			possibleCodesStr.append('0' + str(i))
			continue

		possibleCodesStr.append(str(i))


def numberTest(number: str):
	result = re.findall(r'(\D)(\d{3})(\D{2})(\d{2,3})\b', number)

	if not result:
		return False

	result = result[0]

	letters = (result[0] + result[2]).upper()
	actualNumber = result[1]
	regionCode = result[3]

	# Проверка на невозможную комбинацию --- 000
	if actualNumber == '000':
		return False
	# Проверка на возможные буквы --- А, В, Е, К, М, Н, О, Р, С, Т, У, Х
	if not set(letters).issubset(possibleLetters):
		return False
	# Проверка на правильность кода региона
	if regionCode not in possibleCodesStr:
		return False

	region = next(
		item['region']

		for item in codesOfRegions
		if int(regionCode) in item["code"]
	)

	return [number, region]


# numOfNumbers = int(input("Введите количество номеров для генерации:\n --> "))
# carNumbers = [generateNumber() for _ in range(numOfNumbers)]

carNumbers = ['Щ256НФ38', 'Р389ЧЖ87', 'Ю795ГМ54', 'Э847ЬМ54', 'Е949ЪД06', 'Щ005ЩС26', 'В578ЯХ32', 'О967УЁ74', 'З222СВ32', 'Е631ЭВ98', 'Ф985ЩЯ48', 'Р771ЖЗ99', 'Ч887ПП27', 'О477ИЖ01', 'Щ239ЁИ94', 'Э324ЕО71', 'Х513СЮ62', 'У791ЭО92', 'Ъ848ЦИ24', 'Б716ЖБ11', 'С222СЬ43', 'К175ФЖ94', 'Й565ЖМ27', 'Ф067ЩК72', 'Ы133СЩ28', 'Щ426ФР13', 'К650АЖ85', 'Ч038ЛУ91', 'З832ИГ40', 'Ь050ДР58', 'Ь477ГЯ40', 'Ф641ФБ05', 'М658ЛБ18', 'К540ПД03', 'Т092ЛУ68', 'П866УЪ72', 'Ж436КЫ85', 'А969УЦ10', 'М150ЮЩ98', 'А108ХУ20', 'Х900ХБ76', 'Л906УЪ17', 'Ж090РЮ37', 'Я279ЫТ10', 'Ё149ЁХ38', 'И500ДП32', 'М855ЕП50', 'Д219ЁЭ39', 'Е014ШЦ55', 'Ч595ИП79', 'М677ВШ58', 'И233ЦБ04', 'У655ЖХ97', 'Э739ЯС78', 'Ъ481ЮТ08', 'И074ЙП31', 'Э209АК10', 'У511АО04', 'К210РШ01', 'Б859ЫХ01', 'Ш331УФ34', 'Э291ФЮ71', 'Д946БЖ63', 'З272ЛЁ51', 'Е684ЕЫ03', 'С510СП61', 'Ж710ЕЩ42', 'К706НГ88', 'Я906ЭЩ78', 'Ц250ДЭ83', 'Э982ЭБ32', 'Ё304ПЫ20', 'Й069УП49', 'Г026ЦИ79', 'Ы509МЖ10', 'Б968ЕУ37', 'К937ЬБ61', 'Ю114АЕ59', 'Р122ЛС41', 'Ч695ЯХ14', 'Ч114ЦИ65', 'Ь051ЫК35', 'П593ЧП94', 'Б797ЮЪ59', 'Ю586ТЙ90', 'Е479РЩ42', 'С897КЪ11', 'Ъ052АБ60', 'Ъ100ФХ32', 'Ф446АИ92', 'Г574ЮШ42', 'Ь013ОЮ97', 'А558ЕМ65', 'Д308ДН29', 'Э898КЮ27', 'Ь539ЙЧ56', 'В892ЦА82', 'Ц978ЯШ91', 'Ш539ЭЩ44', 'Ь535ЗЯ91', 'А014ЭК58', 'В768ЛУ33', 'Ж222ПД37', 'Я243ЕД79', 'Х152СЁ51', 'Ж636ЙК15', 'О918КЮ84', 'Т918ЗО79', 'З151ТЭ19', 'С885ФЫ70', 'И267НС73', 'Л667ЫН39', 'К172ВА20', 'К792БВ34', 'Й510СК67', 'У001ЛФ99', 'А010ЙУ07', 'Ш373МЪ49', 'Ъ888ЪЧ23', 'Ь318БЪ21', 'Л777УБ60', 'З769ИА65', 'Т555КК92', 'С080ЩУ04', 'Ф880ИЪ19', 'Ж391ХЙ89', 'К425РЩ13', 'Т560УЩ62', 'П859ВС85', 'П730НЪ71', 'Э661МХ41', 'Т602ЫЫ73', 'А237ЁА20', 'Я007ЁА79', 'З475ЪЪ22', 'Р062ПЪ21', 'М667ДЦ96', 'П270ЭЕ96', 'Н212СК06', 'Ф223ГВ93', 'Ш835ЕР05', 'Б734ЛБ11', 'К789ВЦ64', 'Р726ЁЭ57', 'Т165РШ29', 'Ь990ЖТ68', 'Ж083НЙ14', 'Ц630ЧЮ20', 'С098ОП37', 'Щ911ЕТ66', 'Н053ТУ72', 'Л675ШК63', 'Ъ474ЖЪ84', 'Й865ЬШ32', 'Н290ВЙ75', 'Л828ОЭ14', 'Ц984ЮЭ17', 'Ь289ВЫ73', 'Щ101ЛЬ20', 'Е289КК61', 'Ч292ЁВ77', 'Р981ВЩ74', 'Э250ЪЩ77', 'Ь263ЪЕ29', 'Э619ЫЙ03', 'Ь815ЫХ09', 'З300ЕУ66', 'П937НД86', 'Я590ЧС03', 'Ц802ОЛ56', 'Ч163ОЦ91', 'Ъ710ЧЫ29', 'Й762МЛ68', 'У377ЙН53', 'О910ЫА34', 'В646ШБ65', 'В796ЮЦ61', 'Ю221ХС38', 'Ф916ЫЫ22', 'В585НР77', 'У396ЁЭ08', 'Ё047ЯВ59', 'Ч693ТЙ32', 'Ь588ДУ71', 'Э324ЯЯ82', 'Ы945ФК33', 'Щ484ЩЬ57', 'Ц202ДЪ27', 'Я540РЙ79', 'Щ851ЪЛ99', 'О180ЯШ98', 'Я732ЪЮ04', 'Ъ567УК69', 'Ю107БД98', 'Л342ЬЦ99', 'Ь973ГТ45', 'Ь205ЦХ57', 'Ы633ЫД45', 'И816РЙ34', 'Е562ЩХ82', 'Х632ГТ25', 'Й072СА33', 'Х591СЪ79', 'Ц476ИХ76', 'Ъ931МЛ65', 'Д657НЮ28', 'Я798ЯЯ88', 'Ш760НИ04', 'А348ФТ79', 'Я721АЁ58', 'Д415ЯБ30', 'П140БМ09', 'Б656ШХ28', 'В450ЭЬ15', 'Щ354ЕВ30', 'Ъ605СЬ77', 'Д067ЯЭ92', 'Ы790ЬЧ81', 'Ю397КВ46', 'Т317ДЕ79', 'З586ЮЪ16', 'Т929ПЭ28', 'В925ЯК65', 'Р559ЯП44', 'Е758ЫИ28', 'Х432УЫ33', 'Ё394ВХ33', 'Ы256МЁ82', 'П287МЖ97', 'Щ616РЮ83', 'Л860ФБ48', 'Г044ЯЫ60', 'Ё254ДС06', 'Б831ТР99', 'Л288ЦР75', 'Ы294АХ78', 'Щ621ХХ88', 'Р872ЩЮ61', 'О753ЧЪ05', 'Ю882ЧА12', 'О682ХЖ47', 'Ф701ЦР69', 'С638ОЫ93', 'Л672ВГ69', 'Ь777ЛЙ00', 'Ы084ЬЗ74', 'Ф693ЪЪ62', 'К940ЖЪ52', 'Л258ШБ58', 'Ю369ЬЙ16', 'Х054ИЩ37', 'К249УГ44', 'Д140ЪЩ77', 'Ы956ХЛ98', 'Б545СС66', 'Ж998ПС40', 'М989ЮЩ54', 'Щ627ЦЫ55', 'И834УЖ76', 'Ц475ОЗ85', 'Ю072ТО01', 'И685МБ42', 'Щ628ЬЪ42', 'И339ТЧ05', 'Ь243ЗЯ59', 'З465УЭ07', 'Ж434ЗЙ45', 'Я883ЛШ62', 'К604ЗЗ18', 'Р190РЛ60', 'Р202ФИ97', 'Э637ЛС87', 'М780ЖБ42', 'Д967АД04', 'С752ЬГ17', 'Щ122УЛ57', 'М196НТ52', 'У645ВЫ80', 'Ж952ЪА37', 'И384ЭЮ56', 'Ы084СС83', 'М531ОЖ42', 'Е301ВЖ34', 'Ь507ЖО10', 'К814ЁЭ59', 'З202БЖ83', 'У763ИР14', 'Ъ645НЭ09', 'Д386ЛЪ90', 'Я966ЦЭ30', 'Б053ЙЪ03', 'К162УД97', 'Н183ЁП71', 'Н325ЦЩ74', 'Т840ЙЁ84', 'Р568ХМ98', 'К369ИР14', 'Р625ШК01', 'Ф303АЬ50', 'Л147ЫП37', 'С317СТ85', 'Й027ДИ74', 'Е895НЗ80', 'Ы779ЛМ11', 'М828ЧЗ13', 'Й453ЦБ38', 'Х149ЗА98', 'Ф923ФЧ57', 'Я962ГЫ42', 'М271ЩУ93', 'Ж672ЧЕ08', 'Д483БМ36', 'Э438ЪЙ60', 'Ц176ЖЁ27', 'Й693ГФ39', 'О907ТЛ27', 'М065ФЯ45', 'Д605ЮЦ63', 'Е536ЬЩ20', 'Ь861ЧЖ07', 'Б782ЪГ28', 'М196ЧД08', 'Д552ПЪ82', 'Ъ153ШИ20', 'Й472ЦМ86', 'Ш559ИЮ80', 'Б655ЛШ61', 'Ю525ЬГ62', 'З392ЮЬ58', 'Э358ИЕ76', 'Ё272ФГ43', 'Щ811УА33', 'Л901ЯТ62', 'И969ЁЭ41', 'Л622ХТ07', 'Н309ЕГ25', 'Б723ТЖ59', 'О309НУ71', 'Т272УМ23', 'Ё281ФМ76', 'О732ОЦ01', 'М282ФП89', 'Ш565ЛЪ24', 'Н764ЯД28', 'Ж861АО29', 'С671МХ32', 'Б185НО26', 'Щ531ЫР10', 'И231ЯФ77', 'Ш017УН51', 'С763ЙО26', 'З477ЧЙ77', 'В001УЦ20', 'Г767ЯМ81', 'Ю861КЁ28', 'П403ЬЭ92', 'Ч267ГЧ04', 'Й410ВГ41', 'Т862ЪН13', 'Б291ЫЭ39', 'О671БО71', 'Ё096ЗУ19', 'В790ШД03', 'Р214КЙ03', 'Ц721ФЭ21', 'М614УК80', 'Й747ЙЁ59', 'Э140ЕК84', 'Ё973ЮГ75', 'П266ЕЦ17', 'Ф854ЦС35', 'О469ПТ31', 'Г069ЙБ47', 'Ш364ЗЪ18', 'Г153СЭ13', 'Б949ЦЙ22', 'Щ868УБ80', 'Л881ВЭ96', 'Й636ЖЭ14', 'Ь927ИЧ14', 'Б611АЫ02', 'Ш952ЗЧ23', 'Ь807ТУ70', 'И228ЭЩ71', 'А270ДЬ71', 'Ё092ЦШ93', 'И008КН45', 'Р748ЩЮ68', 'Г110ЙБ20', 'Ю173БЯ26', 'Л050ЫБ54', 'Й937ДУ41', 'Ц704ФК93', 'Н899ЭЭ90', 'Я163ДЩ79', 'Ч856ЛХ08', 'Х494ПЗ34', 'Ы702БЪ27', 'П566ЭЕ77', 'Х332ЙР44', 'Ж286ЖШ99', 'Ж305ЮМ75', 'П872ФЗ03', 'Ж188ЩА25', 'Е822ГД77', 'Т316ПЖ08', 'В401ЁС14', 'Б266РН90', 'Ь628ЧД30', 'Т293ЙР33', 'Ь182ФЮ45', 'Г875УИ94', 'З961МШ65', 'Щ790ЕЪ28', 'Ё277ХЛ58', 'Г202ЁИ09', 'Е531ПС58', 'Л551ЛЪ25', 'Ь684ЩЁ27', 'А911ЕМ06', 'Й090ЦЫ00', 'Б222АЕ38', 'А386ЛД51', 'Т188СЯ30', 'И423ЯЩ71', 'Ю679ЁХ21', 'Б187ЦЁ78', 'К384ЕФ46', 'Ш419ШХ49', 'Ё908ХШ90', 'О283ЁЯ34', 'С418ЧЧ27', 'Т946ПР49', 'Д095ЪТ45', 'Ф833ТР70', 'Ё177СФ52', 'Ф220ОЩ06', 'Щ654ТЩ91', 'Т611ЮД89', 'Р838ЫТ34', 'О117ФЧ36', 'К863ГГ89', 'У529ВЯ88', 'Г711БУ09', 'Ю117ЕН06', 'Ф923БФ34', 'О123ЪД22', 'Я827ЯЪ29', 'Ё740ЯФ17', 'Э859ИЛ35', 'Ъ908МТ02', 'И647ИЮ90', 'С559ЦЪ50', 'Л593ВС63', 'Х296ЬЕ93', 'Ч755ВЦ07', 'И912ВН41', 'Ц593ПЦ08', 'М090ММ54', 'О039ЯЗ38', 'Ш760ПЪ43', 'Щ422ЩЮ19', 'Ь489ЬВ70', 'Я119ТХ84', 'Н366ЩР42', 'Ж367ДР20', 'А425ЛК30', 'К334ЕР84', 'Ъ800ЭЁ73', 'Щ063ЧР44', 'Г072ГФ10', 'Л123ЕО99', 'Ц496ФЦ40', 'П933ОН43', 'Ю019ЙН96', 'В036ЛА46', 'К252РХ93', 'Ч448ЫШ21', 'Ж200ДЭ20', 'Е992ЁЭ23', 'Ш637ЛГ83', 'Т194ПБ58', 'Г650АБ63', 'Г571ПЕ26', 'С319КЩ60', 'Е862БЗ85', 'Я684СЦ67', 'Э214МА28', 'И402ФЯ88', 'В472БН35', 'Ъ443НН44', 'О271ЛМ08', 'Х843ЕВ78', 'Ж160ЭЕ59', 'Щ042ЧХ16', 'Б687ЩТ63', 'Ч179ЛВ16', 'Ю499ТЪ98', 'В278ЙЕ50', 'П534СР02']


possibleLetters = ["А", "В", "Е", "К", "М", "Н", "О", "Р", "С", "Т", "У", "Х"]
correctNumbers = []

for number in carNumbers:
	result = numberTest(number)

	if result:
		correctNumbers.append(result)


if correctNumbers:
	print('Номера правильного типа:')
	for item in correctNumbers:
		print('\t{} -- {}'.format(*item))
else:
	print('Все номера некорректны')




